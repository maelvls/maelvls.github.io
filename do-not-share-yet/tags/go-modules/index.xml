<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go-modules on maelvls dev blog</title>
    <link>https://maelvls.dev/do-not-share-yet/tags/go-modules/</link>
    <description>Recent content in go-modules on maelvls.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 15 Apr 2020 00:00:00 +0000</lastBuildDate>
    
    <atom:link href="https://maelvls.dev/do-not-share-yet/tags/go-modules/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>The Client-go Transitive Hell</title>
      <link>https://maelvls.dev/do-not-share-yet/client-go-transitive-hell/</link>
      <pubDate>Wed, 15 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://maelvls.dev/do-not-share-yet/client-go-transitive-hell/</guid>
      <description>
      
      Client-go is the client library that allows anyone (including Kubernetes itself) to talk to the Kubernetes apiserver. Recently, the Kubernetes team chose to release a breaking version of client-go that adds support for context.Context, without really giving anyone notice. In this post, I detail the workaround and what that happened.
      
      </description>
    </item>
    <item>
      <title>Why is GO111MODULE everywhere, and everything about Go Modules (updated with Go 1.16)</title>
      <link>https://maelvls.dev/do-not-share-yet/go111module-everywhere/</link>
      <pubDate>Wed, 13 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://maelvls.dev/do-not-share-yet/go111module-everywhere/</guid>
      <description>
      
      GO111MODULE is all over the place. It appears in README install instructions, in Dockerfiles, in makefiles. On top of that, the behavior of GO111MODULE has changed from Go 1.11 to 1.12, changed again with Go 1.13 and Go 1.15 and changed a last time in Go 1.16.
      
      </description>
    </item>
    
  </channel>
</rss>
