<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2019s on maelvls dev blog</title><link>https://maelvls.dev/2019/</link><description>Recent content in 2019s on maelvls dev blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 23 Nov 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://maelvls.dev/2019/index.xml" rel="self" type="application/rss+xml"/><item><title>Go Happy Path: the Unindented Line of Sight</title><link>https://maelvls.dev/2019/go-unindented-line-of-sight/</link><pubDate>Sat, 23 Nov 2019 00:00:00 +0000</pubDate><guid>https://maelvls.dev/2019/go-unindented-line-of-sight/</guid><description>While perusing how other Kubernetes developers are implementing their own reconciliation loop, I came across an interesting piece of code.
The author decided to use the if-else control flow at its maximum potential: the logic goes as deep as three tabs to the right. We cannot immediately guess which parts are important and which aren&amp;rsquo;t.
func (r *ReconcileTrial) reconcileJob(instance *trialsv1alpha3.Trial, desiredJob *unstructured.Unstructured) (*unstructured.Unstructured, error) { var err error logger := log.</description></item><item><title>GO111MODULE is everywhere: history and tips</title><link>https://maelvls.dev/2019/go111module-is-everywhere/</link><pubDate>Wed, 13 Nov 2019 00:00:00 +0000</pubDate><guid>https://maelvls.dev/2019/go111module-is-everywhere/</guid><description>You might have noticed that GO111MODULE=on is flourishing everywhere. Many readmes have that:
GO111MODULE=on go get -u golang.org/x/tools/gopls@latest In this short post, I will explain why GO111MODULE exists, its caveats and interesting bits that you need to know when dealing with Go Modules.
Table of contents:
From GOPATH to GO111MODULE The GO111MODULE environment variable GO111MODULE with Go 1.11 and 1.12 GO111MODULE with Go 1.13 So, why is GO111MODULE everywhere?</description></item><item><title>Use of conditions in Kubernetes controllers</title><link>https://maelvls.dev/2019/kubernetes-conditions/</link><pubDate>Tue, 12 Nov 2019 00:00:00 +0000</pubDate><guid>https://maelvls.dev/2019/kubernetes-conditions/</guid><description>While building a Kubernetes controller using CRDs, I stumbled across &amp;lsquo;conditions&amp;rsquo; in the status field. What are conditions and how should I implement them in my controller?
In this post, I will explain what &amp;lsquo;status conditions&amp;rsquo; are in Kubernetes and show how they can be used in your own controllers.
Table of contents:
Pod example What other projects do Conditions vs. State machine Conditions vs. Events Orthogonality vs. Extensibility Are Conditions still used?</description></item></channel></rss>