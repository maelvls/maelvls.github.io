<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ocaml on maelvls dev blog</title><link>https://maelvls.dev/tags/ocaml/</link><description>Recent content in ocaml on maelvls.dev</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 30 May 2020 20:45:06 +0200</lastBuildDate><atom:link href="https://maelvls.dev/tags/ocaml/index.xml" rel="self" type="application/rss+xml"/><item><title>Epic journey with statically and dynamically-linked libraries (.a, .so)</title><link>https://maelvls.dev/static-libraries-and-autoconf-hell/</link><pubDate>Sat, 30 May 2020 20:45:06 +0200</pubDate><guid>https://maelvls.dev/static-libraries-and-autoconf-hell/</guid><description>
Dynamic libraries and PIC (position-independant code) are great features of modern systems. But trying to get the right library built can become a nightmare as soon as you rely on other libraries that may or may not have these features in the first place... In this post, I detail the hacks I made to the ./configure-based build system of Yices, a C++ library.</description></item></channel></rss>