<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>kubernetes on maelvls dev blog</title><link>https://maelvls.dev/tags/kubernetes/</link><description>Recent content in kubernetes on maelvls dev blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 22 Apr 2020 11:58:26 +0200</lastBuildDate><atom:link href="https://maelvls.dev/tags/kubernetes/index.xml" rel="self" type="application/rss+xml"/><item><title>Learning Kubernetes Controllers</title><link>https://maelvls.dev/learning-kubernetes-controllers/</link><pubDate>Wed, 22 Apr 2020 11:58:26 +0200</pubDate><guid>https://maelvls.dev/learning-kubernetes-controllers/</guid><description>Kubernetes&amp;rsquo; extensibility is probably its biggest strength. Controllers and CRDs are all over the place. But finding the right information to begin writing a controller isn&amp;rsquo;t easy due to the sheer amount of tribal knowledge scattered everywhere. This post intends to help you start with controllers.
Let us begin with some terminology:
when I say &amp;ldquo;controller&amp;rdquo; (singular noun), I mean one single loop that watches some objects. I often call this loop &amp;ldquo;controller loop&amp;rdquo; or &amp;ldquo;sync loop&amp;rdquo; or even &amp;ldquo;reconcile loop&amp;rdquo;.</description></item><item><title>Migrating from GKE to Civo's K3s</title><link>https://maelvls.dev/from-gke-to-civo-k3s/</link><pubDate>Sun, 22 Mar 2020 00:00:00 +0000</pubDate><guid>https://maelvls.dev/from-gke-to-civo-k3s/</guid><description>A few days ago, reality hit me hard with this message:
I had only 2 days to find a plan and migrate everything away from GKE! My current setup was only using a single n1-standard-1 on us-west-1 and with no network load balancer. But that was still around â‚¬15 a month and I just didn&amp;rsquo;t want to pay.
Note that I will still use Google&amp;rsquo;s CloudDNS service for now.
I chose to migrate to Civo&amp;rsquo;s managed K3s since they are in beta and I really wanted to try K3s.</description></item><item><title>The Packet's-Eye View of a Kubernetes Service</title><link>https://maelvls.dev/packets-eye-kubernetes-service/</link><pubDate>Sat, 14 Mar 2020 00:00:00 +0000</pubDate><guid>https://maelvls.dev/packets-eye-kubernetes-service/</guid><description>2. how service and ingress interact with their controllers 3. traffic flow with GKE's service LB and Traefik 4. using my own service controller 5. traffic flow with my own service controller 6. comparison, benchmark, recap -- A few weeks back, I had already written about how to avoid the expensive GKE load balancer. This time, I want to go a bit deeper and detail how the Service object routes packets to a pod and how the &amp;lsquo;hostPort&amp;rsquo; method actually works under the hood.</description></item><item><title>Debugging Kubernetes Networking: my kube-dns is not working!</title><link>https://maelvls.dev/debugging-kubernetes-networking/</link><pubDate>Sun, 26 Jan 2020 00:00:00 +0000</pubDate><guid>https://maelvls.dev/debugging-kubernetes-networking/</guid><description>When I scaled my GKE cluster from one node to two nodes, I realised there was some DNS issues with one of the pods on the new Node 2 (that&amp;rsquo;s what I initially thought).
So I went into pod-on-2 (10.24.12.40) and checked that DNS wasn&amp;rsquo;t working. What I did is run
% gcloud compute ssh node-2 % docker run --rm -it --net=container:$(docker ps | grep POD_pod-on-2 | head -1 | cut -f1 -d&amp;#34; &amp;#34;) nicolaka/netshoot % nslookup github.</description></item><item><title>Avoid GKE's expensive load balancer by using hostPort</title><link>https://maelvls.dev/avoid-gke-lb-with-hostport/</link><pubDate>Mon, 20 Jan 2020 00:00:00 +0000</pubDate><guid>https://maelvls.dev/avoid-gke-lb-with-hostport/</guid><description>I like being able to keep my own GKE Kubernetes cluster for experimenting. But I realized that this Network Load Balancer was way too expensive.
What happens is that GKE has a LoadBalancer controller running (I can&amp;rsquo;t see it) and whenever I have a service with type: LoadBalancer, it will create a L4 load balancer that balances 80 and 443 traffic across the nodes. Here is a diagram of my current setup:</description></item><item><title>Use of conditions in Kubernetes controllers</title><link>https://maelvls.dev/kubernetes-conditions/</link><pubDate>Tue, 12 Nov 2019 00:00:00 +0000</pubDate><guid>https://maelvls.dev/kubernetes-conditions/</guid><description>While building a Kubernetes controller using CRDs, I stumbled across &amp;lsquo;conditions&amp;rsquo; in the status field. What are conditions and how should I implement them in my controller?
In this post, I will explain what &amp;lsquo;status conditions&amp;rsquo; are in Kubernetes and show how they can be used in your own controllers.
Table of contents:
Pod example What other projects do Conditions vs. State machine Conditions vs. Events Orthogonality vs. Extensibility Are Conditions still used?</description></item></channel></rss>