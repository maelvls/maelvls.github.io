<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>gcp on maelvls dev blog</title><link>https://maelvls.dev/tags/gcp/</link><description>Recent content in gcp on maelvls dev blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 13 Apr 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://maelvls.dev/tags/gcp/index.xml" rel="self" type="application/rss+xml"/><item><title>How do packets find their way back?</title><link>https://maelvls.dev/how-do-packets-come-back/</link><pubDate>Mon, 13 Apr 2020 00:00:00 +0000</pubDate><guid>https://maelvls.dev/how-do-packets-come-back/</guid><description>In this article, I will expand on the last diagram I drew for my post &amp;ldquo;The Packet&amp;rsquo;s-Eye View of a Kubernetes Service&amp;quot;. Here is the diagram:
Notice one tiny mistake here: the port in src: 1.2.3.4:80 is off! When connecting to a remote host, the TCP stack picks a random ephemeral IP above or equal 32768. The kernel calls it &amp;ldquo;local ports&amp;rdquo;, see inet_hash_connect, secure_ipv4_port_ephemeral and ip_local_port_range. Let us fix this mistake and use the local port 32345 for example.</description></item></channel></rss>