<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>maelvls dev blog</title><link>https://maelvls.dev/</link><description>Recent content on maelvls.dev</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 09 May 2020 16:02:26 +0200</lastBuildDate><atom:link href="https://maelvls.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>Github Actions with a private Terraform module</title><link>https://maelvls.dev/gh-actions-with-tf-private-repo/</link><pubDate>Sat, 09 May 2020 16:02:26 +0200</pubDate><guid>https://maelvls.dev/gh-actions-with-tf-private-repo/</guid><description>
Terraform makes it easy to manage infrastructure at scale; you
might want to share code between modules, and that's where it becomes tricky.
In this post, I try to give some clues on how to use terraform across private
Github repos.</description></item><item><title>Learning Kubernetes Controllers</title><link>https://maelvls.dev/learning-kubernetes-controllers/</link><pubDate>Wed, 22 Apr 2020 11:58:26 +0200</pubDate><guid>https://maelvls.dev/learning-kubernetes-controllers/</guid><description>
Kubernetes' extensibility is probably its biggest strength. Controllers and
CRDs are all over the place. But finding the right information to begin
writing a controller isn't easy due to the sheer amount of tribal knowledge
scattered everywhere. Here are some links to help you start.</description></item><item><title>How do packets find their way back?</title><link>https://maelvls.dev/how-do-packets-come-back/</link><pubDate>Mon, 13 Apr 2020 00:00:00 +0000</pubDate><guid>https://maelvls.dev/how-do-packets-come-back/</guid><description>
In one of my previous posts, I studied how traffic flows when using
Kubernetes Services. While drawing the last diagram, I did not clearly
see how traffic could make its way back to the user. In this
post, I focus on how packets find their way back and what makes stateless
rewriting interesting.</description></item><item><title>My home office setup in 2020</title><link>https://maelvls.dev/home-office-2020/</link><pubDate>Mon, 30 Mar 2020 00:00:00 +0000</pubDate><guid>https://maelvls.dev/home-office-2020/</guid><description>
Here is what my home office looks like in 2020 and what changed between 2019 and 2020!</description></item><item><title>Migrating from GKE to Civo's K3s</title><link>https://maelvls.dev/from-gke-to-civo-k3s/</link><pubDate>Sun, 22 Mar 2020 00:00:00 +0000</pubDate><guid>https://maelvls.dev/from-gke-to-civo-k3s/</guid><description>
My free trial on GKE was ending in 2 days and I had to find a way to migrate away. I decided to switch to Civo's managed K3s.</description></item><item><title>The Packet's-Eye View of a Kubernetes Service</title><link>https://maelvls.dev/packets-eye-kubernetes-service/</link><pubDate>Sat, 14 Mar 2020 00:00:00 +0000</pubDate><guid>https://maelvls.dev/packets-eye-kubernetes-service/</guid><description>
The Service and Ingress respectively brings L4 and L7 traffics to your
pods. In this article, I focus on how traffic flows in and what are the
interactions between the ingress controller and the "service-lb controller"
(the thing that creates the external load balancer). I also detail how the
`hostPort` approach shapes traffic.</description></item><item><title>You should write comments</title><link>https://maelvls.dev/you-should-write-comments/</link><pubDate>Thu, 27 Feb 2020 00:00:00 +0000</pubDate><guid>https://maelvls.dev/you-should-write-comments/</guid><description>
We often talk about avoiding unecessary comments that needlessly paraphrase
what the code does. In this article, I gathered some thoughts about why
writing comments is as important as writing the code itself.</description></item><item><title>Debugging Kubernetes Networking: my kube-dns is not working!</title><link>https://maelvls.dev/debugging-kubernetes-networking/</link><pubDate>Sun, 26 Jan 2020 00:00:00 +0000</pubDate><guid>https://maelvls.dev/debugging-kubernetes-networking/</guid><description>
Some pods were unable to connect to the kube-proxy pod on one of my GKE
Kubernetes clusters. This post present an in-depth investigation using
tcpdump, wireshark and iptables tracing.</description></item><item><title>Avoid GKE's expensive load balancer by using hostPort</title><link>https://maelvls.dev/avoid-gke-lb-with-hostport/</link><pubDate>Mon, 20 Jan 2020 00:00:00 +0000</pubDate><guid>https://maelvls.dev/avoid-gke-lb-with-hostport/</guid><description>
I want to avoid using the expensive Google Network Load Balancer and
instead do the load balancing in-cluster using akrobateo, which
acts as a LoadBalancer controller.</description></item><item><title>What to do when Go ignores HTTP_PROXY for 127.0.0.1</title><link>https://maelvls.dev/go-ignores-proxy-localhost/</link><pubDate>Mon, 06 Jan 2020 00:00:00 +0000</pubDate><guid>https://maelvls.dev/go-ignores-proxy-localhost/</guid><description>
At some point, the Go team chose to disable the proxy for requests coming
from localhost or 127.0.0.1. This is annoying when debugging services
locally.</description></item><item><title>Go Happy Path: the Unindented Line of Sight</title><link>https://maelvls.dev/go-happy-line-of-sight/</link><pubDate>Sat, 23 Nov 2019 00:00:00 +0000</pubDate><guid>https://maelvls.dev/go-happy-line-of-sight/</guid><description>
Readability is a property we all love about Go. In other languages, it
might be fine to have a lot of nested if statements; in Go, it is a good
practice to keep away from overly-nested logic.</description></item><item><title>GO111MODULE is everywhere: history and tips</title><link>https://maelvls.dev/go111module-everywhere/</link><pubDate>Wed, 13 Nov 2019 00:00:00 +0000</pubDate><guid>https://maelvls.dev/go111module-everywhere/</guid><description>
GO111MODULE is all over the place. It appears in README install
instructions, in Dockerfiles, in makefiles. On top of that, the behavior of
GO111MODULE has changed from Go 1.11 to 1.12, changed again with 1.13 and
will changed a last time in 1.14.</description></item><item><title>Use of conditions in Kubernetes controllers</title><link>https://maelvls.dev/kubernetes-conditions/</link><pubDate>Tue, 12 Nov 2019 00:00:00 +0000</pubDate><guid>https://maelvls.dev/kubernetes-conditions/</guid><description>
Although progress is being made, Kubernetes controllers and operators
still require prior knowledge about Kubernetes internals. Information on
how to set the status is scattered across comments, issues, PRs and the
Kubernetes code itself. Conditions may be a good solution for your
controller, but for what?</description></item><item><title>About</title><link>https://maelvls.dev/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://maelvls.dev/about/</guid><description>
I currently work at Ori, a Cloud infrastructure startup that aims at providing a unified experience for deploying to clo...</description></item></channel></rss>